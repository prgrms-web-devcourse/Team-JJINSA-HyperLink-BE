buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.hyper-link'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
    toolVersion = '0.8.8'
    file("$buildDir/customJacocoReportDir")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.3.1.RELEASE'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    // amqp
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    //mail
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.1'

    // spring-batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'com.redis:spring-batch-redis:3.0.7'

}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jar {
    enabled = false
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("build/resources/main/static/docs")
}

build {
    dependsOn copyDocument
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/hyperlink/server/ServerApplication.*",
                    "com/hyperlink/server/global/profile/controller/ProfileController.*",
                    "com/hyperlink/server/global/exception/ErrorReportRequest.*",
                    "com/hyperlink/server/global/exception/GlobalExceptionHandler.*",
                    //oauth
                    "com/hyperlink/server/domain/auth/oauth/dto/GoogleProfileResult.*",
                    "com/hyperlink/server/domain/auth/oauth/dto/GoogleToken.*",
                    "com/hyperlink/server/domain/auth/oauth/dto/OauthResponse.*",
                    "com/hyperlink/server/domain/auth/oauth/GoogleAccessToken.*",
                    "com/hyperlink/server/domain/auth/oauth/GoogleOauthClient.*",
                    "com/hyperlink/server/domain/auth/oauth/JsonProcessingCustomException.*",

                    //유효기간 관련 예외 및 로직
                    "com/hyperlink/server/domain/member/exception/SignUpTimeOutException.*",
                    "com/hyperlink/server/domain/auth/token/exception/TokenExpiredException.*",
                    "com/hyperlink/server/domain/auth/token/AuthTokenExtractor*",

                    // s3
                    "com/hyperlink/server/domain/member/s3/AwsS3Service*",
                    "com/hyperlink/server/domain/member/exception/ProfileImgUploadFailException*",
                    "com/hyperlink/server/global/config/AwsS3Config.*",

                    //설정 파일
                    "com/hyperlink/server/global/config/LoginMemberIdArgumentResolver.*",
                    "com/hyperlink/server/global/config/WebConfig.*"
            ] + Qdomains)
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '*.ProfileController*',
                    '*.ServerApplication*',
                    '*.oauth*',
                    '*.ErrorReportRequest*',
                    "*.GlobalExceptionHandler*",
                    //oauth
                    '*.GoogleAccessToken*',
                    '*.GoogleAccessTokenRepository*',
                    '*.GoogleOauthClient*',
                    '*.GoogleProfileResult*',
                    '*.GoogleToken*',
                    '*.OauthResponse*',
                    '*.JsonProcessingCustomException*',
                    //시간초과
                    '*.TokenExpiredException*',
                    '*.SignUpTimeOutException*',
                    '*.AuthTokenExtractor*',
                    //argumentResolver
                    '*.LoginMemberIdArgumentResolver*',
                    //config
                    '*.WebConfig*',
                    //s3
                    '*AwsS3Service*',
                    '*ProfileImgUploadFailException*',
                    '*AwsS3Config*'
            ] + Qdomains
        }
    }
}
